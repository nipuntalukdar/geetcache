// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Status int64

const (
	Status_SUCCESS          Status = 0
	Status_FAILURE          Status = 1
	Status_KEY_EXISTS       Status = 2
	Status_KEY_NOT_EXISTS   Status = 3
	Status_EMPTY_LIST       Status = 4
	Status_LEADER_NOT_FOUND Status = 5
	Status_NOT_LEADER       Status = 6
	Status_BAD_COMMAND      Status = 7
)

func (p Status) String() string {
	switch p {
	case Status_SUCCESS:
		return "SUCCESS"
	case Status_FAILURE:
		return "FAILURE"
	case Status_KEY_EXISTS:
		return "KEY_EXISTS"
	case Status_KEY_NOT_EXISTS:
		return "KEY_NOT_EXISTS"
	case Status_EMPTY_LIST:
		return "EMPTY_LIST"
	case Status_LEADER_NOT_FOUND:
		return "LEADER_NOT_FOUND"
	case Status_NOT_LEADER:
		return "NOT_LEADER"
	case Status_BAD_COMMAND:
		return "BAD_COMMAND"
	}
	return "<UNSET>"
}

func StatusFromString(s string) (Status, error) {
	switch s {
	case "SUCCESS":
		return Status_SUCCESS, nil
	case "FAILURE":
		return Status_FAILURE, nil
	case "KEY_EXISTS":
		return Status_KEY_EXISTS, nil
	case "KEY_NOT_EXISTS":
		return Status_KEY_NOT_EXISTS, nil
	case "EMPTY_LIST":
		return Status_EMPTY_LIST, nil
	case "LEADER_NOT_FOUND":
		return Status_LEADER_NOT_FOUND, nil
	case "NOT_LEADER":
		return Status_NOT_LEADER, nil
	case "BAD_COMMAND":
		return Status_BAD_COMMAND, nil
	}
	return Status(0), fmt.Errorf("not a valid Status string")
}

func StatusPtr(v Status) *Status { return &v }

func (p Status) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Status) UnmarshalText(text []byte) error {
	q, err := StatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - Key
//  - Data
//  - Expiry
type PutCommand struct {
	Key    string `thrift:"Key,1" json:"Key"`
	Data   []byte `thrift:"Data,2" json:"Data"`
	Expiry int64  `thrift:"Expiry,3" json:"Expiry"`
}

func NewPutCommand() *PutCommand {
	return &PutCommand{}
}

func (p *PutCommand) GetKey() string {
	return p.Key
}

func (p *PutCommand) GetData() []byte {
	return p.Data
}

func (p *PutCommand) GetExpiry() int64 {
	return p.Expiry
}
func (p *PutCommand) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PutCommand) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *PutCommand) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *PutCommand) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Expiry = v
	}
	return nil
}

func (p *PutCommand) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PutCommand"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PutCommand) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Key: ", p), err)
	}
	return err
}

func (p *PutCommand) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Data", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Data: ", p), err)
	}
	if err := oprot.WriteBinary(p.Data); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Data (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Data: ", p), err)
	}
	return err
}

func (p *PutCommand) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Expiry", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Expiry: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Expiry)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Expiry (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Expiry: ", p), err)
	}
	return err
}

func (p *PutCommand) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutCommand(%+v)", *p)
}

// Attributes:
//  - Key
//  - Stat
type DelResponse struct {
	Key  string `thrift:"Key,1" json:"Key"`
	Stat Status `thrift:"Stat,2" json:"Stat"`
}

func NewDelResponse() *DelResponse {
	return &DelResponse{}
}

func (p *DelResponse) GetKey() string {
	return p.Key
}

func (p *DelResponse) GetStat() Status {
	return p.Stat
}
func (p *DelResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DelResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *DelResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Status(v)
		p.Stat = temp
	}
	return nil
}

func (p *DelResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DelResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DelResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Key: ", p), err)
	}
	return err
}

func (p *DelResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Stat", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Stat: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Stat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Stat (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Stat: ", p), err)
	}
	return err
}

func (p *DelResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DelResponse(%+v)", *p)
}

// Attributes:
//  - Stat
//  - Leader
type LeaderResponse struct {
	Stat   Status `thrift:"Stat,1" json:"Stat"`
	Leader string `thrift:"Leader,2" json:"Leader"`
}

func NewLeaderResponse() *LeaderResponse {
	return &LeaderResponse{}
}

func (p *LeaderResponse) GetStat() Status {
	return p.Stat
}

func (p *LeaderResponse) GetLeader() string {
	return p.Leader
}
func (p *LeaderResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LeaderResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Status(v)
		p.Stat = temp
	}
	return nil
}

func (p *LeaderResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Leader = v
	}
	return nil
}

func (p *LeaderResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LeaderResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LeaderResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Stat", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Stat: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Stat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Stat (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Stat: ", p), err)
	}
	return err
}

func (p *LeaderResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Leader", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Leader: ", p), err)
	}
	if err := oprot.WriteString(string(p.Leader)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Leader (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Leader: ", p), err)
	}
	return err
}

func (p *LeaderResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeaderResponse(%+v)", *p)
}

// Attributes:
//  - Stat
//  - Peers
type PeersResponse struct {
	Stat  Status   `thrift:"Stat,1" json:"Stat"`
	Peers []string `thrift:"Peers,2" json:"Peers,omitempty"`
}

func NewPeersResponse() *PeersResponse {
	return &PeersResponse{}
}

func (p *PeersResponse) GetStat() Status {
	return p.Stat
}

var PeersResponse_Peers_DEFAULT []string

func (p *PeersResponse) GetPeers() []string {
	return p.Peers
}
func (p *PeersResponse) IsSetPeers() bool {
	return p.Peers != nil
}

func (p *PeersResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PeersResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Status(v)
		p.Stat = temp
	}
	return nil
}

func (p *PeersResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Peers = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Peers = append(p.Peers, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PeersResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PeersResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PeersResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Stat", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Stat: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Stat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Stat (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Stat: ", p), err)
	}
	return err
}

func (p *PeersResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPeers() {
		if err := oprot.WriteFieldBegin("Peers", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Peers: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Peers)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Peers {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Peers: ", p), err)
		}
	}
	return err
}

func (p *PeersResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PeersResponse(%+v)", *p)
}

// Attributes:
//  - Key
//  - Status
//  - Data
type GetResponse struct {
	Key    string `thrift:"Key,1" json:"Key"`
	Status Status `thrift:"Status,2" json:"Status"`
	Data   []byte `thrift:"Data,3" json:"Data,omitempty"`
}

func NewGetResponse() *GetResponse {
	return &GetResponse{}
}

func (p *GetResponse) GetKey() string {
	return p.Key
}

func (p *GetResponse) GetStatus() Status {
	return p.Status
}

var GetResponse_Data_DEFAULT []byte

func (p *GetResponse) GetData() []byte {
	return p.Data
}
func (p *GetResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *GetResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Status(v)
		p.Status = temp
	}
	return nil
}

func (p *GetResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *GetResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Key: ", p), err)
	}
	return err
}

func (p *GetResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Status", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Status (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Status: ", p), err)
	}
	return err
}

func (p *GetResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin("Data", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Data: ", p), err)
		}
		if err := oprot.WriteBinary(p.Data); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Data (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Data: ", p), err)
		}
	}
	return err
}

func (p *GetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResponse(%+v)", *p)
}

// Attributes:
//  - ListKey
//  - Append
//  - Values
//  - Expiry
type ListPutCommand struct {
	ListKey string   `thrift:"ListKey,1" json:"ListKey"`
	Append  bool     `thrift:"Append,2" json:"Append"`
	Values  [][]byte `thrift:"Values,3" json:"Values"`
	Expiry  *int64   `thrift:"Expiry,4" json:"Expiry,omitempty"`
}

func NewListPutCommand() *ListPutCommand {
	return &ListPutCommand{
		Append: true,
	}
}

func (p *ListPutCommand) GetListKey() string {
	return p.ListKey
}

func (p *ListPutCommand) GetAppend() bool {
	return p.Append
}

func (p *ListPutCommand) GetValues() [][]byte {
	return p.Values
}

var ListPutCommand_Expiry_DEFAULT int64

func (p *ListPutCommand) GetExpiry() int64 {
	if !p.IsSetExpiry() {
		return ListPutCommand_Expiry_DEFAULT
	}
	return *p.Expiry
}
func (p *ListPutCommand) IsSetExpiry() bool {
	return p.Expiry != nil
}

func (p *ListPutCommand) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListPutCommand) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ListKey = v
	}
	return nil
}

func (p *ListPutCommand) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Append = v
	}
	return nil
}

func (p *ListPutCommand) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.Values = tSlice
	for i := 0; i < size; i++ {
		var _elem1 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Values = append(p.Values, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListPutCommand) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Expiry = &v
	}
	return nil
}

func (p *ListPutCommand) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListPutCommand"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListPutCommand) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ListKey", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ListKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.ListKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ListKey (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ListKey: ", p), err)
	}
	return err
}

func (p *ListPutCommand) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Append", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Append: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Append)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Append (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Append: ", p), err)
	}
	return err
}

func (p *ListPutCommand) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Values", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Values: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Values)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Values {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Values: ", p), err)
	}
	return err
}

func (p *ListPutCommand) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpiry() {
		if err := oprot.WriteFieldBegin("Expiry", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Expiry: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Expiry)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Expiry (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Expiry: ", p), err)
		}
	}
	return err
}

func (p *ListPutCommand) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPutCommand(%+v)", *p)
}

// Attributes:
//  - ListKey
//  - MaxCount
//  - Front
type ListGPCommand struct {
	ListKey  string `thrift:"ListKey,1" json:"ListKey"`
	MaxCount int32  `thrift:"MaxCount,2" json:"MaxCount"`
	Front    bool   `thrift:"Front,3" json:"Front"`
}

func NewListGPCommand() *ListGPCommand {
	return &ListGPCommand{
		MaxCount: 1,

		Front: true,
	}
}

func (p *ListGPCommand) GetListKey() string {
	return p.ListKey
}

func (p *ListGPCommand) GetMaxCount() int32 {
	return p.MaxCount
}

func (p *ListGPCommand) GetFront() bool {
	return p.Front
}
func (p *ListGPCommand) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListGPCommand) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ListKey = v
	}
	return nil
}

func (p *ListGPCommand) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MaxCount = v
	}
	return nil
}

func (p *ListGPCommand) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Front = v
	}
	return nil
}

func (p *ListGPCommand) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListGPCommand"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListGPCommand) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ListKey", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ListKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.ListKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ListKey (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ListKey: ", p), err)
	}
	return err
}

func (p *ListGPCommand) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MaxCount", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:MaxCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MaxCount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:MaxCount: ", p), err)
	}
	return err
}

func (p *ListGPCommand) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Front", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Front: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Front)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Front (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Front: ", p), err)
	}
	return err
}

func (p *ListGPCommand) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListGPCommand(%+v)", *p)
}

// Attributes:
//  - ListKey
//  - Stat
//  - Retlen
//  - Values
type ListGPResponse struct {
	ListKey string   `thrift:"ListKey,1" json:"ListKey"`
	Stat    Status   `thrift:"Stat,2" json:"Stat"`
	Retlen  int32    `thrift:"Retlen,3" json:"Retlen"`
	Values  [][]byte `thrift:"Values,4" json:"Values,omitempty"`
}

func NewListGPResponse() *ListGPResponse {
	return &ListGPResponse{}
}

func (p *ListGPResponse) GetListKey() string {
	return p.ListKey
}

func (p *ListGPResponse) GetStat() Status {
	return p.Stat
}

func (p *ListGPResponse) GetRetlen() int32 {
	return p.Retlen
}

var ListGPResponse_Values_DEFAULT [][]byte

func (p *ListGPResponse) GetValues() [][]byte {
	return p.Values
}
func (p *ListGPResponse) IsSetValues() bool {
	return p.Values != nil
}

func (p *ListGPResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListGPResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ListKey = v
	}
	return nil
}

func (p *ListGPResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Status(v)
		p.Stat = temp
	}
	return nil
}

func (p *ListGPResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Retlen = v
	}
	return nil
}

func (p *ListGPResponse) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.Values = tSlice
	for i := 0; i < size; i++ {
		var _elem2 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.Values = append(p.Values, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListGPResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListGPResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListGPResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ListKey", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ListKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.ListKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ListKey (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ListKey: ", p), err)
	}
	return err
}

func (p *ListGPResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Stat", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Stat: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Stat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Stat (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Stat: ", p), err)
	}
	return err
}

func (p *ListGPResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Retlen", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Retlen: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Retlen)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Retlen (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Retlen: ", p), err)
	}
	return err
}

func (p *ListGPResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetValues() {
		if err := oprot.WriteFieldBegin("Values", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Values: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Values)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Values {
			if err := oprot.WriteBinary(v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Values: ", p), err)
		}
	}
	return err
}

func (p *ListGPResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListGPResponse(%+v)", *p)
}
