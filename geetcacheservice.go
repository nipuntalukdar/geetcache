// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type GeetcacheService interface {
	// Parameters:
	//  - Put
	Put(put *PutCommand) (r Status, err error)
	// Parameters:
	//  - ListPut
	ListPut(listPut *ListPutCommand) (r Status, err error)
	// Parameters:
	//  - LPop
	ListPop(lPop *ListGPCommand) (r *ListGPResponse, err error)
	// Parameters:
	//  - LGet
	ListGet(lGet *ListGPCommand) (r *ListGPResponse, err error)
	// Parameters:
	//  - Key
	ListLen(key string) (r *ListLenResponse, err error)
	// Parameters:
	//  - Key
	Get(key string) (r *GetResponse, err error)
	// Parameters:
	//  - Key
	Delete(key string) (r *DelResponse, err error)
	// Parameters:
	//  - Key
	DeleteList(key string) (r *DelResponse, err error)
	Leader() (r *LeaderResponse, err error)
	Peers() (r *PeersResponse, err error)
	// Parameters:
	//  - Counter
	AddCounter(counter *CAddCommand) (r Status, err error)
	// Parameters:
	//  - CounterName
	DeleteCounter(counterName string) (r Status, err error)
	// Parameters:
	//  - Counter
	Increament(counter *CChangeCommand) (r *CStatus, err error)
	// Parameters:
	//  - Counter
	Decrement(counter *CChangeCommand) (r *CStatus, err error)
	// Parameters:
	//  - CounterName
	GetCounterValue(counterName string) (r *CStatus, err error)
	// Parameters:
	//  - Cas
	CompSwap(cas *CASCommand) (r Status, err error)
	// Parameters:
	//  - Hlcmd
	HLogCreate(hlcmd *HLogCreateCmd) (r *HLogStatus, err error)
	// Parameters:
	//  - Key
	HLogDelete(key string) (r *HLogStatus, err error)
	// Parameters:
	//  - Key
	HLogCardinality(key string) (r *HLogStatus, err error)
	// Parameters:
	//  - Hladd
	HLogAdd(hladd *HLogAddCmd) (r *HLogStatus, err error)
}

type GeetcacheServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewGeetcacheServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *GeetcacheServiceClient {
	return &GeetcacheServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewGeetcacheServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *GeetcacheServiceClient {
	return &GeetcacheServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Put
func (p *GeetcacheServiceClient) Put(put *PutCommand) (r Status, err error) {
	if err = p.sendPut(put); err != nil {
		return
	}
	return p.recvPut()
}

func (p *GeetcacheServiceClient) sendPut(put *PutCommand) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Put", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServicePutArgs{
		Put: put,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvPut() (value Status, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Put" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Put failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Put failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error4 error
		error4, err = error3.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error4
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Put failed: invalid message type")
		return
	}
	result := GeetcacheServicePutResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ListPut
func (p *GeetcacheServiceClient) ListPut(listPut *ListPutCommand) (r Status, err error) {
	if err = p.sendListPut(listPut); err != nil {
		return
	}
	return p.recvListPut()
}

func (p *GeetcacheServiceClient) sendListPut(listPut *ListPutCommand) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ListPut", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceListPutArgs{
		ListPut: listPut,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvListPut() (value Status, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ListPut" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ListPut failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ListPut failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error5 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error6 error
		error6, err = error5.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error6
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ListPut failed: invalid message type")
		return
	}
	result := GeetcacheServiceListPutResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - LPop
func (p *GeetcacheServiceClient) ListPop(lPop *ListGPCommand) (r *ListGPResponse, err error) {
	if err = p.sendListPop(lPop); err != nil {
		return
	}
	return p.recvListPop()
}

func (p *GeetcacheServiceClient) sendListPop(lPop *ListGPCommand) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ListPop", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceListPopArgs{
		LPop: lPop,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvListPop() (value *ListGPResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ListPop" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ListPop failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ListPop failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error7 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error8 error
		error8, err = error7.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error8
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ListPop failed: invalid message type")
		return
	}
	result := GeetcacheServiceListPopResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - LGet
func (p *GeetcacheServiceClient) ListGet(lGet *ListGPCommand) (r *ListGPResponse, err error) {
	if err = p.sendListGet(lGet); err != nil {
		return
	}
	return p.recvListGet()
}

func (p *GeetcacheServiceClient) sendListGet(lGet *ListGPCommand) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ListGet", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceListGetArgs{
		LGet: lGet,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvListGet() (value *ListGPResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ListGet" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ListGet failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ListGet failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error9 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error10 error
		error10, err = error9.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error10
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ListGet failed: invalid message type")
		return
	}
	result := GeetcacheServiceListGetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *GeetcacheServiceClient) ListLen(key string) (r *ListLenResponse, err error) {
	if err = p.sendListLen(key); err != nil {
		return
	}
	return p.recvListLen()
}

func (p *GeetcacheServiceClient) sendListLen(key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ListLen", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceListLenArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvListLen() (value *ListLenResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ListLen" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ListLen failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ListLen failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error11 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error12 error
		error12, err = error11.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error12
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ListLen failed: invalid message type")
		return
	}
	result := GeetcacheServiceListLenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *GeetcacheServiceClient) Get(key string) (r *GetResponse, err error) {
	if err = p.sendGet(key); err != nil {
		return
	}
	return p.recvGet()
}

func (p *GeetcacheServiceClient) sendGet(key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Get", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceGetArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvGet() (value *GetResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Get" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Get failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Get failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error13 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error14 error
		error14, err = error13.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error14
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Get failed: invalid message type")
		return
	}
	result := GeetcacheServiceGetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *GeetcacheServiceClient) Delete(key string) (r *DelResponse, err error) {
	if err = p.sendDelete(key); err != nil {
		return
	}
	return p.recvDelete()
}

func (p *GeetcacheServiceClient) sendDelete(key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Delete", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceDeleteArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvDelete() (value *DelResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Delete" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Delete failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Delete failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error15 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error16 error
		error16, err = error15.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error16
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Delete failed: invalid message type")
		return
	}
	result := GeetcacheServiceDeleteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *GeetcacheServiceClient) DeleteList(key string) (r *DelResponse, err error) {
	if err = p.sendDeleteList(key); err != nil {
		return
	}
	return p.recvDeleteList()
}

func (p *GeetcacheServiceClient) sendDeleteList(key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("DeleteList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceDeleteListArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvDeleteList() (value *DelResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "DeleteList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "DeleteList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "DeleteList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error17 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error18 error
		error18, err = error17.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error18
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "DeleteList failed: invalid message type")
		return
	}
	result := GeetcacheServiceDeleteListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *GeetcacheServiceClient) Leader() (r *LeaderResponse, err error) {
	if err = p.sendLeader(); err != nil {
		return
	}
	return p.recvLeader()
}

func (p *GeetcacheServiceClient) sendLeader() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Leader", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceLeaderArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvLeader() (value *LeaderResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Leader" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Leader failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Leader failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error19 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error20 error
		error20, err = error19.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error20
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Leader failed: invalid message type")
		return
	}
	result := GeetcacheServiceLeaderResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *GeetcacheServiceClient) Peers() (r *PeersResponse, err error) {
	if err = p.sendPeers(); err != nil {
		return
	}
	return p.recvPeers()
}

func (p *GeetcacheServiceClient) sendPeers() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Peers", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServicePeersArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvPeers() (value *PeersResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Peers" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Peers failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Peers failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error21 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error22 error
		error22, err = error21.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error22
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Peers failed: invalid message type")
		return
	}
	result := GeetcacheServicePeersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Counter
func (p *GeetcacheServiceClient) AddCounter(counter *CAddCommand) (r Status, err error) {
	if err = p.sendAddCounter(counter); err != nil {
		return
	}
	return p.recvAddCounter()
}

func (p *GeetcacheServiceClient) sendAddCounter(counter *CAddCommand) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("AddCounter", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceAddCounterArgs{
		Counter: counter,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvAddCounter() (value Status, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "AddCounter" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "AddCounter failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "AddCounter failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error23 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error24 error
		error24, err = error23.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error24
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "AddCounter failed: invalid message type")
		return
	}
	result := GeetcacheServiceAddCounterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - CounterName
func (p *GeetcacheServiceClient) DeleteCounter(counterName string) (r Status, err error) {
	if err = p.sendDeleteCounter(counterName); err != nil {
		return
	}
	return p.recvDeleteCounter()
}

func (p *GeetcacheServiceClient) sendDeleteCounter(counterName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("DeleteCounter", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceDeleteCounterArgs{
		CounterName: counterName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvDeleteCounter() (value Status, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "DeleteCounter" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "DeleteCounter failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "DeleteCounter failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error25 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error26 error
		error26, err = error25.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error26
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "DeleteCounter failed: invalid message type")
		return
	}
	result := GeetcacheServiceDeleteCounterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Counter
func (p *GeetcacheServiceClient) Increament(counter *CChangeCommand) (r *CStatus, err error) {
	if err = p.sendIncreament(counter); err != nil {
		return
	}
	return p.recvIncreament()
}

func (p *GeetcacheServiceClient) sendIncreament(counter *CChangeCommand) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Increament", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceIncreamentArgs{
		Counter: counter,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvIncreament() (value *CStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Increament" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Increament failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Increament failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error27 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error28 error
		error28, err = error27.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error28
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Increament failed: invalid message type")
		return
	}
	result := GeetcacheServiceIncreamentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Counter
func (p *GeetcacheServiceClient) Decrement(counter *CChangeCommand) (r *CStatus, err error) {
	if err = p.sendDecrement(counter); err != nil {
		return
	}
	return p.recvDecrement()
}

func (p *GeetcacheServiceClient) sendDecrement(counter *CChangeCommand) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Decrement", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceDecrementArgs{
		Counter: counter,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvDecrement() (value *CStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Decrement" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Decrement failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Decrement failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error29 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error30 error
		error30, err = error29.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error30
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Decrement failed: invalid message type")
		return
	}
	result := GeetcacheServiceDecrementResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - CounterName
func (p *GeetcacheServiceClient) GetCounterValue(counterName string) (r *CStatus, err error) {
	if err = p.sendGetCounterValue(counterName); err != nil {
		return
	}
	return p.recvGetCounterValue()
}

func (p *GeetcacheServiceClient) sendGetCounterValue(counterName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetCounterValue", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceGetCounterValueArgs{
		CounterName: counterName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvGetCounterValue() (value *CStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetCounterValue" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetCounterValue failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetCounterValue failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error32 error
		error32, err = error31.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error32
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetCounterValue failed: invalid message type")
		return
	}
	result := GeetcacheServiceGetCounterValueResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Cas
func (p *GeetcacheServiceClient) CompSwap(cas *CASCommand) (r Status, err error) {
	if err = p.sendCompSwap(cas); err != nil {
		return
	}
	return p.recvCompSwap()
}

func (p *GeetcacheServiceClient) sendCompSwap(cas *CASCommand) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CompSwap", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceCompSwapArgs{
		Cas: cas,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvCompSwap() (value Status, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "CompSwap" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CompSwap failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CompSwap failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error33 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error34 error
		error34, err = error33.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error34
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CompSwap failed: invalid message type")
		return
	}
	result := GeetcacheServiceCompSwapResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Hlcmd
func (p *GeetcacheServiceClient) HLogCreate(hlcmd *HLogCreateCmd) (r *HLogStatus, err error) {
	if err = p.sendHLogCreate(hlcmd); err != nil {
		return
	}
	return p.recvHLogCreate()
}

func (p *GeetcacheServiceClient) sendHLogCreate(hlcmd *HLogCreateCmd) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("HLogCreate", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceHLogCreateArgs{
		Hlcmd: hlcmd,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvHLogCreate() (value *HLogStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "HLogCreate" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "HLogCreate failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "HLogCreate failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error36 error
		error36, err = error35.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error36
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "HLogCreate failed: invalid message type")
		return
	}
	result := GeetcacheServiceHLogCreateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *GeetcacheServiceClient) HLogDelete(key string) (r *HLogStatus, err error) {
	if err = p.sendHLogDelete(key); err != nil {
		return
	}
	return p.recvHLogDelete()
}

func (p *GeetcacheServiceClient) sendHLogDelete(key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("HLogDelete", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceHLogDeleteArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvHLogDelete() (value *HLogStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "HLogDelete" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "HLogDelete failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "HLogDelete failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error38 error
		error38, err = error37.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error38
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "HLogDelete failed: invalid message type")
		return
	}
	result := GeetcacheServiceHLogDeleteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *GeetcacheServiceClient) HLogCardinality(key string) (r *HLogStatus, err error) {
	if err = p.sendHLogCardinality(key); err != nil {
		return
	}
	return p.recvHLogCardinality()
}

func (p *GeetcacheServiceClient) sendHLogCardinality(key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("HLogCardinality", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceHLogCardinalityArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvHLogCardinality() (value *HLogStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "HLogCardinality" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "HLogCardinality failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "HLogCardinality failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error39 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error40 error
		error40, err = error39.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error40
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "HLogCardinality failed: invalid message type")
		return
	}
	result := GeetcacheServiceHLogCardinalityResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Hladd
func (p *GeetcacheServiceClient) HLogAdd(hladd *HLogAddCmd) (r *HLogStatus, err error) {
	if err = p.sendHLogAdd(hladd); err != nil {
		return
	}
	return p.recvHLogAdd()
}

func (p *GeetcacheServiceClient) sendHLogAdd(hladd *HLogAddCmd) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("HLogAdd", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GeetcacheServiceHLogAddArgs{
		Hladd: hladd,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GeetcacheServiceClient) recvHLogAdd() (value *HLogStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "HLogAdd" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "HLogAdd failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "HLogAdd failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error41 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error42 error
		error42, err = error41.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error42
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "HLogAdd failed: invalid message type")
		return
	}
	result := GeetcacheServiceHLogAddResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type GeetcacheServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      GeetcacheService
}

func (p *GeetcacheServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *GeetcacheServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *GeetcacheServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewGeetcacheServiceProcessor(handler GeetcacheService) *GeetcacheServiceProcessor {

	self43 := &GeetcacheServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self43.processorMap["Put"] = &geetcacheServiceProcessorPut{handler: handler}
	self43.processorMap["ListPut"] = &geetcacheServiceProcessorListPut{handler: handler}
	self43.processorMap["ListPop"] = &geetcacheServiceProcessorListPop{handler: handler}
	self43.processorMap["ListGet"] = &geetcacheServiceProcessorListGet{handler: handler}
	self43.processorMap["ListLen"] = &geetcacheServiceProcessorListLen{handler: handler}
	self43.processorMap["Get"] = &geetcacheServiceProcessorGet{handler: handler}
	self43.processorMap["Delete"] = &geetcacheServiceProcessorDelete{handler: handler}
	self43.processorMap["DeleteList"] = &geetcacheServiceProcessorDeleteList{handler: handler}
	self43.processorMap["Leader"] = &geetcacheServiceProcessorLeader{handler: handler}
	self43.processorMap["Peers"] = &geetcacheServiceProcessorPeers{handler: handler}
	self43.processorMap["AddCounter"] = &geetcacheServiceProcessorAddCounter{handler: handler}
	self43.processorMap["DeleteCounter"] = &geetcacheServiceProcessorDeleteCounter{handler: handler}
	self43.processorMap["Increament"] = &geetcacheServiceProcessorIncreament{handler: handler}
	self43.processorMap["Decrement"] = &geetcacheServiceProcessorDecrement{handler: handler}
	self43.processorMap["GetCounterValue"] = &geetcacheServiceProcessorGetCounterValue{handler: handler}
	self43.processorMap["CompSwap"] = &geetcacheServiceProcessorCompSwap{handler: handler}
	self43.processorMap["HLogCreate"] = &geetcacheServiceProcessorHLogCreate{handler: handler}
	self43.processorMap["HLogDelete"] = &geetcacheServiceProcessorHLogDelete{handler: handler}
	self43.processorMap["HLogCardinality"] = &geetcacheServiceProcessorHLogCardinality{handler: handler}
	self43.processorMap["HLogAdd"] = &geetcacheServiceProcessorHLogAdd{handler: handler}
	return self43
}

func (p *GeetcacheServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x44 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x44.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x44

}

type geetcacheServiceProcessorPut struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorPut) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServicePutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Put", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServicePutResult{}
	var retval Status
	var err2 error
	if retval, err2 = p.handler.Put(args.Put); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Put: "+err2.Error())
		oprot.WriteMessageBegin("Put", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("Put", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorListPut struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorListPut) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceListPutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListPut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceListPutResult{}
	var retval Status
	var err2 error
	if retval, err2 = p.handler.ListPut(args.ListPut); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListPut: "+err2.Error())
		oprot.WriteMessageBegin("ListPut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("ListPut", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorListPop struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorListPop) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceListPopArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListPop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceListPopResult{}
	var retval *ListGPResponse
	var err2 error
	if retval, err2 = p.handler.ListPop(args.LPop); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListPop: "+err2.Error())
		oprot.WriteMessageBegin("ListPop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListPop", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorListGet struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorListGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceListGetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListGet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceListGetResult{}
	var retval *ListGPResponse
	var err2 error
	if retval, err2 = p.handler.ListGet(args.LGet); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListGet: "+err2.Error())
		oprot.WriteMessageBegin("ListGet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListGet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorListLen struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorListLen) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceListLenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListLen", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceListLenResult{}
	var retval *ListLenResponse
	var err2 error
	if retval, err2 = p.handler.ListLen(args.Key); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListLen: "+err2.Error())
		oprot.WriteMessageBegin("ListLen", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListLen", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorGet struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceGetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceGetResult{}
	var retval *GetResponse
	var err2 error
	if retval, err2 = p.handler.Get(args.Key); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Get: "+err2.Error())
		oprot.WriteMessageBegin("Get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Get", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorDelete struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorDelete) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceDeleteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Delete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceDeleteResult{}
	var retval *DelResponse
	var err2 error
	if retval, err2 = p.handler.Delete(args.Key); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Delete: "+err2.Error())
		oprot.WriteMessageBegin("Delete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Delete", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorDeleteList struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorDeleteList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceDeleteListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceDeleteListResult{}
	var retval *DelResponse
	var err2 error
	if retval, err2 = p.handler.DeleteList(args.Key); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteList: "+err2.Error())
		oprot.WriteMessageBegin("DeleteList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorLeader struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorLeader) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceLeaderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Leader", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceLeaderResult{}
	var retval *LeaderResponse
	var err2 error
	if retval, err2 = p.handler.Leader(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Leader: "+err2.Error())
		oprot.WriteMessageBegin("Leader", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Leader", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorPeers struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorPeers) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServicePeersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Peers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServicePeersResult{}
	var retval *PeersResponse
	var err2 error
	if retval, err2 = p.handler.Peers(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Peers: "+err2.Error())
		oprot.WriteMessageBegin("Peers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Peers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorAddCounter struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorAddCounter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceAddCounterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddCounter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceAddCounterResult{}
	var retval Status
	var err2 error
	if retval, err2 = p.handler.AddCounter(args.Counter); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddCounter: "+err2.Error())
		oprot.WriteMessageBegin("AddCounter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("AddCounter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorDeleteCounter struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorDeleteCounter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceDeleteCounterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteCounter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceDeleteCounterResult{}
	var retval Status
	var err2 error
	if retval, err2 = p.handler.DeleteCounter(args.CounterName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteCounter: "+err2.Error())
		oprot.WriteMessageBegin("DeleteCounter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteCounter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorIncreament struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorIncreament) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceIncreamentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Increament", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceIncreamentResult{}
	var retval *CStatus
	var err2 error
	if retval, err2 = p.handler.Increament(args.Counter); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Increament: "+err2.Error())
		oprot.WriteMessageBegin("Increament", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Increament", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorDecrement struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorDecrement) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceDecrementArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Decrement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceDecrementResult{}
	var retval *CStatus
	var err2 error
	if retval, err2 = p.handler.Decrement(args.Counter); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Decrement: "+err2.Error())
		oprot.WriteMessageBegin("Decrement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Decrement", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorGetCounterValue struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorGetCounterValue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceGetCounterValueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCounterValue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceGetCounterValueResult{}
	var retval *CStatus
	var err2 error
	if retval, err2 = p.handler.GetCounterValue(args.CounterName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCounterValue: "+err2.Error())
		oprot.WriteMessageBegin("GetCounterValue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCounterValue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorCompSwap struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorCompSwap) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceCompSwapArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CompSwap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceCompSwapResult{}
	var retval Status
	var err2 error
	if retval, err2 = p.handler.CompSwap(args.Cas); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CompSwap: "+err2.Error())
		oprot.WriteMessageBegin("CompSwap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("CompSwap", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorHLogCreate struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorHLogCreate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceHLogCreateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("HLogCreate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceHLogCreateResult{}
	var retval *HLogStatus
	var err2 error
	if retval, err2 = p.handler.HLogCreate(args.Hlcmd); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HLogCreate: "+err2.Error())
		oprot.WriteMessageBegin("HLogCreate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("HLogCreate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorHLogDelete struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorHLogDelete) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceHLogDeleteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("HLogDelete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceHLogDeleteResult{}
	var retval *HLogStatus
	var err2 error
	if retval, err2 = p.handler.HLogDelete(args.Key); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HLogDelete: "+err2.Error())
		oprot.WriteMessageBegin("HLogDelete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("HLogDelete", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorHLogCardinality struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorHLogCardinality) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceHLogCardinalityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("HLogCardinality", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceHLogCardinalityResult{}
	var retval *HLogStatus
	var err2 error
	if retval, err2 = p.handler.HLogCardinality(args.Key); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HLogCardinality: "+err2.Error())
		oprot.WriteMessageBegin("HLogCardinality", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("HLogCardinality", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type geetcacheServiceProcessorHLogAdd struct {
	handler GeetcacheService
}

func (p *geetcacheServiceProcessorHLogAdd) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GeetcacheServiceHLogAddArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("HLogAdd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GeetcacheServiceHLogAddResult{}
	var retval *HLogStatus
	var err2 error
	if retval, err2 = p.handler.HLogAdd(args.Hladd); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HLogAdd: "+err2.Error())
		oprot.WriteMessageBegin("HLogAdd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("HLogAdd", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Put
type GeetcacheServicePutArgs struct {
	Put *PutCommand `thrift:"put,1" json:"put"`
}

func NewGeetcacheServicePutArgs() *GeetcacheServicePutArgs {
	return &GeetcacheServicePutArgs{}
}

var GeetcacheServicePutArgs_Put_DEFAULT *PutCommand

func (p *GeetcacheServicePutArgs) GetPut() *PutCommand {
	if !p.IsSetPut() {
		return GeetcacheServicePutArgs_Put_DEFAULT
	}
	return p.Put
}
func (p *GeetcacheServicePutArgs) IsSetPut() bool {
	return p.Put != nil
}

func (p *GeetcacheServicePutArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServicePutArgs) readField1(iprot thrift.TProtocol) error {
	p.Put = &PutCommand{}
	if err := p.Put.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Put), err)
	}
	return nil
}

func (p *GeetcacheServicePutArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Put_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServicePutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("put", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:put: ", p), err)
	}
	if err := p.Put.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Put), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:put: ", p), err)
	}
	return err
}

func (p *GeetcacheServicePutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServicePutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServicePutResult struct {
	Success *Status `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServicePutResult() *GeetcacheServicePutResult {
	return &GeetcacheServicePutResult{}
}

var GeetcacheServicePutResult_Success_DEFAULT Status

func (p *GeetcacheServicePutResult) GetSuccess() Status {
	if !p.IsSetSuccess() {
		return GeetcacheServicePutResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *GeetcacheServicePutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServicePutResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServicePutResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := Status(v)
		p.Success = &temp
	}
	return nil
}

func (p *GeetcacheServicePutResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Put_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServicePutResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServicePutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServicePutResult(%+v)", *p)
}

// Attributes:
//  - ListPut
type GeetcacheServiceListPutArgs struct {
	ListPut *ListPutCommand `thrift:"listPut,1" json:"listPut"`
}

func NewGeetcacheServiceListPutArgs() *GeetcacheServiceListPutArgs {
	return &GeetcacheServiceListPutArgs{}
}

var GeetcacheServiceListPutArgs_ListPut_DEFAULT *ListPutCommand

func (p *GeetcacheServiceListPutArgs) GetListPut() *ListPutCommand {
	if !p.IsSetListPut() {
		return GeetcacheServiceListPutArgs_ListPut_DEFAULT
	}
	return p.ListPut
}
func (p *GeetcacheServiceListPutArgs) IsSetListPut() bool {
	return p.ListPut != nil
}

func (p *GeetcacheServiceListPutArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceListPutArgs) readField1(iprot thrift.TProtocol) error {
	p.ListPut = &ListPutCommand{
		Append: true,
	}
	if err := p.ListPut.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListPut), err)
	}
	return nil
}

func (p *GeetcacheServiceListPutArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListPut_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceListPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("listPut", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listPut: ", p), err)
	}
	if err := p.ListPut.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListPut), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listPut: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceListPutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceListPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceListPutResult struct {
	Success *Status `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceListPutResult() *GeetcacheServiceListPutResult {
	return &GeetcacheServiceListPutResult{}
}

var GeetcacheServiceListPutResult_Success_DEFAULT Status

func (p *GeetcacheServiceListPutResult) GetSuccess() Status {
	if !p.IsSetSuccess() {
		return GeetcacheServiceListPutResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *GeetcacheServiceListPutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceListPutResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceListPutResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := Status(v)
		p.Success = &temp
	}
	return nil
}

func (p *GeetcacheServiceListPutResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListPut_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceListPutResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceListPutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceListPutResult(%+v)", *p)
}

// Attributes:
//  - LPop
type GeetcacheServiceListPopArgs struct {
	LPop *ListGPCommand `thrift:"lPop,1" json:"lPop"`
}

func NewGeetcacheServiceListPopArgs() *GeetcacheServiceListPopArgs {
	return &GeetcacheServiceListPopArgs{}
}

var GeetcacheServiceListPopArgs_LPop_DEFAULT *ListGPCommand

func (p *GeetcacheServiceListPopArgs) GetLPop() *ListGPCommand {
	if !p.IsSetLPop() {
		return GeetcacheServiceListPopArgs_LPop_DEFAULT
	}
	return p.LPop
}
func (p *GeetcacheServiceListPopArgs) IsSetLPop() bool {
	return p.LPop != nil
}

func (p *GeetcacheServiceListPopArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceListPopArgs) readField1(iprot thrift.TProtocol) error {
	p.LPop = &ListGPCommand{
		MaxCount: 1,

		Front: true,
	}
	if err := p.LPop.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LPop), err)
	}
	return nil
}

func (p *GeetcacheServiceListPopArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListPop_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceListPopArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lPop", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lPop: ", p), err)
	}
	if err := p.LPop.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LPop), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lPop: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceListPopArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceListPopArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceListPopResult struct {
	Success *ListGPResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceListPopResult() *GeetcacheServiceListPopResult {
	return &GeetcacheServiceListPopResult{}
}

var GeetcacheServiceListPopResult_Success_DEFAULT *ListGPResponse

func (p *GeetcacheServiceListPopResult) GetSuccess() *ListGPResponse {
	if !p.IsSetSuccess() {
		return GeetcacheServiceListPopResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServiceListPopResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceListPopResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceListPopResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ListGPResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServiceListPopResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListPop_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceListPopResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceListPopResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceListPopResult(%+v)", *p)
}

// Attributes:
//  - LGet
type GeetcacheServiceListGetArgs struct {
	LGet *ListGPCommand `thrift:"lGet,1" json:"lGet"`
}

func NewGeetcacheServiceListGetArgs() *GeetcacheServiceListGetArgs {
	return &GeetcacheServiceListGetArgs{}
}

var GeetcacheServiceListGetArgs_LGet_DEFAULT *ListGPCommand

func (p *GeetcacheServiceListGetArgs) GetLGet() *ListGPCommand {
	if !p.IsSetLGet() {
		return GeetcacheServiceListGetArgs_LGet_DEFAULT
	}
	return p.LGet
}
func (p *GeetcacheServiceListGetArgs) IsSetLGet() bool {
	return p.LGet != nil
}

func (p *GeetcacheServiceListGetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceListGetArgs) readField1(iprot thrift.TProtocol) error {
	p.LGet = &ListGPCommand{
		MaxCount: 1,

		Front: true,
	}
	if err := p.LGet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LGet), err)
	}
	return nil
}

func (p *GeetcacheServiceListGetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListGet_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceListGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lGet", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lGet: ", p), err)
	}
	if err := p.LGet.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LGet), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lGet: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceListGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceListGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceListGetResult struct {
	Success *ListGPResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceListGetResult() *GeetcacheServiceListGetResult {
	return &GeetcacheServiceListGetResult{}
}

var GeetcacheServiceListGetResult_Success_DEFAULT *ListGPResponse

func (p *GeetcacheServiceListGetResult) GetSuccess() *ListGPResponse {
	if !p.IsSetSuccess() {
		return GeetcacheServiceListGetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServiceListGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceListGetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceListGetResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ListGPResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServiceListGetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListGet_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceListGetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceListGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceListGetResult(%+v)", *p)
}

// Attributes:
//  - Key
type GeetcacheServiceListLenArgs struct {
	Key string `thrift:"key,1" json:"key"`
}

func NewGeetcacheServiceListLenArgs() *GeetcacheServiceListLenArgs {
	return &GeetcacheServiceListLenArgs{}
}

func (p *GeetcacheServiceListLenArgs) GetKey() string {
	return p.Key
}
func (p *GeetcacheServiceListLenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceListLenArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *GeetcacheServiceListLenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListLen_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceListLenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceListLenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceListLenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceListLenResult struct {
	Success *ListLenResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceListLenResult() *GeetcacheServiceListLenResult {
	return &GeetcacheServiceListLenResult{}
}

var GeetcacheServiceListLenResult_Success_DEFAULT *ListLenResponse

func (p *GeetcacheServiceListLenResult) GetSuccess() *ListLenResponse {
	if !p.IsSetSuccess() {
		return GeetcacheServiceListLenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServiceListLenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceListLenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceListLenResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ListLenResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServiceListLenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListLen_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceListLenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceListLenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceListLenResult(%+v)", *p)
}

// Attributes:
//  - Key
type GeetcacheServiceGetArgs struct {
	Key string `thrift:"key,1" json:"key"`
}

func NewGeetcacheServiceGetArgs() *GeetcacheServiceGetArgs {
	return &GeetcacheServiceGetArgs{}
}

func (p *GeetcacheServiceGetArgs) GetKey() string {
	return p.Key
}
func (p *GeetcacheServiceGetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceGetArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *GeetcacheServiceGetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Get_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceGetResult struct {
	Success *GetResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceGetResult() *GeetcacheServiceGetResult {
	return &GeetcacheServiceGetResult{}
}

var GeetcacheServiceGetResult_Success_DEFAULT *GetResponse

func (p *GeetcacheServiceGetResult) GetSuccess() *GetResponse {
	if !p.IsSetSuccess() {
		return GeetcacheServiceGetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServiceGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceGetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceGetResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &GetResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServiceGetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Get_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceGetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceGetResult(%+v)", *p)
}

// Attributes:
//  - Key
type GeetcacheServiceDeleteArgs struct {
	Key string `thrift:"key,1" json:"key"`
}

func NewGeetcacheServiceDeleteArgs() *GeetcacheServiceDeleteArgs {
	return &GeetcacheServiceDeleteArgs{}
}

func (p *GeetcacheServiceDeleteArgs) GetKey() string {
	return p.Key
}
func (p *GeetcacheServiceDeleteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceDeleteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *GeetcacheServiceDeleteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Delete_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceDeleteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceDeleteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceDeleteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceDeleteResult struct {
	Success *DelResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceDeleteResult() *GeetcacheServiceDeleteResult {
	return &GeetcacheServiceDeleteResult{}
}

var GeetcacheServiceDeleteResult_Success_DEFAULT *DelResponse

func (p *GeetcacheServiceDeleteResult) GetSuccess() *DelResponse {
	if !p.IsSetSuccess() {
		return GeetcacheServiceDeleteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServiceDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceDeleteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceDeleteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &DelResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServiceDeleteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Delete_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceDeleteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceDeleteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceDeleteResult(%+v)", *p)
}

// Attributes:
//  - Key
type GeetcacheServiceDeleteListArgs struct {
	Key string `thrift:"key,1" json:"key"`
}

func NewGeetcacheServiceDeleteListArgs() *GeetcacheServiceDeleteListArgs {
	return &GeetcacheServiceDeleteListArgs{}
}

func (p *GeetcacheServiceDeleteListArgs) GetKey() string {
	return p.Key
}
func (p *GeetcacheServiceDeleteListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceDeleteListArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *GeetcacheServiceDeleteListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceDeleteListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceDeleteListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceDeleteListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceDeleteListResult struct {
	Success *DelResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceDeleteListResult() *GeetcacheServiceDeleteListResult {
	return &GeetcacheServiceDeleteListResult{}
}

var GeetcacheServiceDeleteListResult_Success_DEFAULT *DelResponse

func (p *GeetcacheServiceDeleteListResult) GetSuccess() *DelResponse {
	if !p.IsSetSuccess() {
		return GeetcacheServiceDeleteListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServiceDeleteListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceDeleteListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceDeleteListResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &DelResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServiceDeleteListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceDeleteListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceDeleteListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceDeleteListResult(%+v)", *p)
}

type GeetcacheServiceLeaderArgs struct {
}

func NewGeetcacheServiceLeaderArgs() *GeetcacheServiceLeaderArgs {
	return &GeetcacheServiceLeaderArgs{}
}

func (p *GeetcacheServiceLeaderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceLeaderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Leader_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceLeaderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceLeaderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceLeaderResult struct {
	Success *LeaderResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceLeaderResult() *GeetcacheServiceLeaderResult {
	return &GeetcacheServiceLeaderResult{}
}

var GeetcacheServiceLeaderResult_Success_DEFAULT *LeaderResponse

func (p *GeetcacheServiceLeaderResult) GetSuccess() *LeaderResponse {
	if !p.IsSetSuccess() {
		return GeetcacheServiceLeaderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServiceLeaderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceLeaderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceLeaderResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &LeaderResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServiceLeaderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Leader_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceLeaderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceLeaderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceLeaderResult(%+v)", *p)
}

type GeetcacheServicePeersArgs struct {
}

func NewGeetcacheServicePeersArgs() *GeetcacheServicePeersArgs {
	return &GeetcacheServicePeersArgs{}
}

func (p *GeetcacheServicePeersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServicePeersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Peers_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServicePeersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServicePeersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServicePeersResult struct {
	Success *PeersResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServicePeersResult() *GeetcacheServicePeersResult {
	return &GeetcacheServicePeersResult{}
}

var GeetcacheServicePeersResult_Success_DEFAULT *PeersResponse

func (p *GeetcacheServicePeersResult) GetSuccess() *PeersResponse {
	if !p.IsSetSuccess() {
		return GeetcacheServicePeersResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServicePeersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServicePeersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServicePeersResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &PeersResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServicePeersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Peers_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServicePeersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServicePeersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServicePeersResult(%+v)", *p)
}

// Attributes:
//  - Counter
type GeetcacheServiceAddCounterArgs struct {
	Counter *CAddCommand `thrift:"counter,1" json:"counter"`
}

func NewGeetcacheServiceAddCounterArgs() *GeetcacheServiceAddCounterArgs {
	return &GeetcacheServiceAddCounterArgs{}
}

var GeetcacheServiceAddCounterArgs_Counter_DEFAULT *CAddCommand

func (p *GeetcacheServiceAddCounterArgs) GetCounter() *CAddCommand {
	if !p.IsSetCounter() {
		return GeetcacheServiceAddCounterArgs_Counter_DEFAULT
	}
	return p.Counter
}
func (p *GeetcacheServiceAddCounterArgs) IsSetCounter() bool {
	return p.Counter != nil
}

func (p *GeetcacheServiceAddCounterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceAddCounterArgs) readField1(iprot thrift.TProtocol) error {
	p.Counter = &CAddCommand{}
	if err := p.Counter.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Counter), err)
	}
	return nil
}

func (p *GeetcacheServiceAddCounterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddCounter_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceAddCounterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("counter", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:counter: ", p), err)
	}
	if err := p.Counter.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Counter), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:counter: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceAddCounterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceAddCounterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceAddCounterResult struct {
	Success *Status `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceAddCounterResult() *GeetcacheServiceAddCounterResult {
	return &GeetcacheServiceAddCounterResult{}
}

var GeetcacheServiceAddCounterResult_Success_DEFAULT Status

func (p *GeetcacheServiceAddCounterResult) GetSuccess() Status {
	if !p.IsSetSuccess() {
		return GeetcacheServiceAddCounterResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *GeetcacheServiceAddCounterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceAddCounterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceAddCounterResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := Status(v)
		p.Success = &temp
	}
	return nil
}

func (p *GeetcacheServiceAddCounterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddCounter_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceAddCounterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceAddCounterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceAddCounterResult(%+v)", *p)
}

// Attributes:
//  - CounterName
type GeetcacheServiceDeleteCounterArgs struct {
	CounterName string `thrift:"counterName,1" json:"counterName"`
}

func NewGeetcacheServiceDeleteCounterArgs() *GeetcacheServiceDeleteCounterArgs {
	return &GeetcacheServiceDeleteCounterArgs{}
}

func (p *GeetcacheServiceDeleteCounterArgs) GetCounterName() string {
	return p.CounterName
}
func (p *GeetcacheServiceDeleteCounterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceDeleteCounterArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CounterName = v
	}
	return nil
}

func (p *GeetcacheServiceDeleteCounterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteCounter_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceDeleteCounterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("counterName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:counterName: ", p), err)
	}
	if err := oprot.WriteString(string(p.CounterName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.counterName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:counterName: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceDeleteCounterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceDeleteCounterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceDeleteCounterResult struct {
	Success *Status `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceDeleteCounterResult() *GeetcacheServiceDeleteCounterResult {
	return &GeetcacheServiceDeleteCounterResult{}
}

var GeetcacheServiceDeleteCounterResult_Success_DEFAULT Status

func (p *GeetcacheServiceDeleteCounterResult) GetSuccess() Status {
	if !p.IsSetSuccess() {
		return GeetcacheServiceDeleteCounterResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *GeetcacheServiceDeleteCounterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceDeleteCounterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceDeleteCounterResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := Status(v)
		p.Success = &temp
	}
	return nil
}

func (p *GeetcacheServiceDeleteCounterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteCounter_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceDeleteCounterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceDeleteCounterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceDeleteCounterResult(%+v)", *p)
}

// Attributes:
//  - Counter
type GeetcacheServiceIncreamentArgs struct {
	Counter *CChangeCommand `thrift:"counter,1" json:"counter"`
}

func NewGeetcacheServiceIncreamentArgs() *GeetcacheServiceIncreamentArgs {
	return &GeetcacheServiceIncreamentArgs{}
}

var GeetcacheServiceIncreamentArgs_Counter_DEFAULT *CChangeCommand

func (p *GeetcacheServiceIncreamentArgs) GetCounter() *CChangeCommand {
	if !p.IsSetCounter() {
		return GeetcacheServiceIncreamentArgs_Counter_DEFAULT
	}
	return p.Counter
}
func (p *GeetcacheServiceIncreamentArgs) IsSetCounter() bool {
	return p.Counter != nil
}

func (p *GeetcacheServiceIncreamentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceIncreamentArgs) readField1(iprot thrift.TProtocol) error {
	p.Counter = &CChangeCommand{}
	if err := p.Counter.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Counter), err)
	}
	return nil
}

func (p *GeetcacheServiceIncreamentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Increament_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceIncreamentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("counter", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:counter: ", p), err)
	}
	if err := p.Counter.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Counter), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:counter: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceIncreamentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceIncreamentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceIncreamentResult struct {
	Success *CStatus `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceIncreamentResult() *GeetcacheServiceIncreamentResult {
	return &GeetcacheServiceIncreamentResult{}
}

var GeetcacheServiceIncreamentResult_Success_DEFAULT *CStatus

func (p *GeetcacheServiceIncreamentResult) GetSuccess() *CStatus {
	if !p.IsSetSuccess() {
		return GeetcacheServiceIncreamentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServiceIncreamentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceIncreamentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceIncreamentResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &CStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServiceIncreamentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Increament_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceIncreamentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceIncreamentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceIncreamentResult(%+v)", *p)
}

// Attributes:
//  - Counter
type GeetcacheServiceDecrementArgs struct {
	Counter *CChangeCommand `thrift:"counter,1" json:"counter"`
}

func NewGeetcacheServiceDecrementArgs() *GeetcacheServiceDecrementArgs {
	return &GeetcacheServiceDecrementArgs{}
}

var GeetcacheServiceDecrementArgs_Counter_DEFAULT *CChangeCommand

func (p *GeetcacheServiceDecrementArgs) GetCounter() *CChangeCommand {
	if !p.IsSetCounter() {
		return GeetcacheServiceDecrementArgs_Counter_DEFAULT
	}
	return p.Counter
}
func (p *GeetcacheServiceDecrementArgs) IsSetCounter() bool {
	return p.Counter != nil
}

func (p *GeetcacheServiceDecrementArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceDecrementArgs) readField1(iprot thrift.TProtocol) error {
	p.Counter = &CChangeCommand{}
	if err := p.Counter.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Counter), err)
	}
	return nil
}

func (p *GeetcacheServiceDecrementArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Decrement_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceDecrementArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("counter", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:counter: ", p), err)
	}
	if err := p.Counter.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Counter), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:counter: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceDecrementArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceDecrementArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceDecrementResult struct {
	Success *CStatus `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceDecrementResult() *GeetcacheServiceDecrementResult {
	return &GeetcacheServiceDecrementResult{}
}

var GeetcacheServiceDecrementResult_Success_DEFAULT *CStatus

func (p *GeetcacheServiceDecrementResult) GetSuccess() *CStatus {
	if !p.IsSetSuccess() {
		return GeetcacheServiceDecrementResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServiceDecrementResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceDecrementResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceDecrementResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &CStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServiceDecrementResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Decrement_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceDecrementResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceDecrementResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceDecrementResult(%+v)", *p)
}

// Attributes:
//  - CounterName
type GeetcacheServiceGetCounterValueArgs struct {
	CounterName string `thrift:"counterName,1" json:"counterName"`
}

func NewGeetcacheServiceGetCounterValueArgs() *GeetcacheServiceGetCounterValueArgs {
	return &GeetcacheServiceGetCounterValueArgs{}
}

func (p *GeetcacheServiceGetCounterValueArgs) GetCounterName() string {
	return p.CounterName
}
func (p *GeetcacheServiceGetCounterValueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceGetCounterValueArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CounterName = v
	}
	return nil
}

func (p *GeetcacheServiceGetCounterValueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCounterValue_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceGetCounterValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("counterName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:counterName: ", p), err)
	}
	if err := oprot.WriteString(string(p.CounterName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.counterName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:counterName: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceGetCounterValueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceGetCounterValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceGetCounterValueResult struct {
	Success *CStatus `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceGetCounterValueResult() *GeetcacheServiceGetCounterValueResult {
	return &GeetcacheServiceGetCounterValueResult{}
}

var GeetcacheServiceGetCounterValueResult_Success_DEFAULT *CStatus

func (p *GeetcacheServiceGetCounterValueResult) GetSuccess() *CStatus {
	if !p.IsSetSuccess() {
		return GeetcacheServiceGetCounterValueResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServiceGetCounterValueResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceGetCounterValueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceGetCounterValueResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &CStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServiceGetCounterValueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCounterValue_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceGetCounterValueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceGetCounterValueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceGetCounterValueResult(%+v)", *p)
}

// Attributes:
//  - Cas
type GeetcacheServiceCompSwapArgs struct {
	Cas *CASCommand `thrift:"cas,1" json:"cas"`
}

func NewGeetcacheServiceCompSwapArgs() *GeetcacheServiceCompSwapArgs {
	return &GeetcacheServiceCompSwapArgs{}
}

var GeetcacheServiceCompSwapArgs_Cas_DEFAULT *CASCommand

func (p *GeetcacheServiceCompSwapArgs) GetCas() *CASCommand {
	if !p.IsSetCas() {
		return GeetcacheServiceCompSwapArgs_Cas_DEFAULT
	}
	return p.Cas
}
func (p *GeetcacheServiceCompSwapArgs) IsSetCas() bool {
	return p.Cas != nil
}

func (p *GeetcacheServiceCompSwapArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceCompSwapArgs) readField1(iprot thrift.TProtocol) error {
	p.Cas = &CASCommand{}
	if err := p.Cas.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cas), err)
	}
	return nil
}

func (p *GeetcacheServiceCompSwapArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CompSwap_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceCompSwapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cas", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cas: ", p), err)
	}
	if err := p.Cas.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cas), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cas: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceCompSwapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceCompSwapArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceCompSwapResult struct {
	Success *Status `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceCompSwapResult() *GeetcacheServiceCompSwapResult {
	return &GeetcacheServiceCompSwapResult{}
}

var GeetcacheServiceCompSwapResult_Success_DEFAULT Status

func (p *GeetcacheServiceCompSwapResult) GetSuccess() Status {
	if !p.IsSetSuccess() {
		return GeetcacheServiceCompSwapResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *GeetcacheServiceCompSwapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceCompSwapResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceCompSwapResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := Status(v)
		p.Success = &temp
	}
	return nil
}

func (p *GeetcacheServiceCompSwapResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CompSwap_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceCompSwapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceCompSwapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceCompSwapResult(%+v)", *p)
}

// Attributes:
//  - Hlcmd
type GeetcacheServiceHLogCreateArgs struct {
	Hlcmd *HLogCreateCmd `thrift:"hlcmd,1" json:"hlcmd"`
}

func NewGeetcacheServiceHLogCreateArgs() *GeetcacheServiceHLogCreateArgs {
	return &GeetcacheServiceHLogCreateArgs{}
}

var GeetcacheServiceHLogCreateArgs_Hlcmd_DEFAULT *HLogCreateCmd

func (p *GeetcacheServiceHLogCreateArgs) GetHlcmd() *HLogCreateCmd {
	if !p.IsSetHlcmd() {
		return GeetcacheServiceHLogCreateArgs_Hlcmd_DEFAULT
	}
	return p.Hlcmd
}
func (p *GeetcacheServiceHLogCreateArgs) IsSetHlcmd() bool {
	return p.Hlcmd != nil
}

func (p *GeetcacheServiceHLogCreateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceHLogCreateArgs) readField1(iprot thrift.TProtocol) error {
	p.Hlcmd = &HLogCreateCmd{}
	if err := p.Hlcmd.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Hlcmd), err)
	}
	return nil
}

func (p *GeetcacheServiceHLogCreateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HLogCreate_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceHLogCreateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hlcmd", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hlcmd: ", p), err)
	}
	if err := p.Hlcmd.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Hlcmd), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hlcmd: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceHLogCreateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceHLogCreateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceHLogCreateResult struct {
	Success *HLogStatus `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceHLogCreateResult() *GeetcacheServiceHLogCreateResult {
	return &GeetcacheServiceHLogCreateResult{}
}

var GeetcacheServiceHLogCreateResult_Success_DEFAULT *HLogStatus

func (p *GeetcacheServiceHLogCreateResult) GetSuccess() *HLogStatus {
	if !p.IsSetSuccess() {
		return GeetcacheServiceHLogCreateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServiceHLogCreateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceHLogCreateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceHLogCreateResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &HLogStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServiceHLogCreateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HLogCreate_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceHLogCreateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceHLogCreateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceHLogCreateResult(%+v)", *p)
}

// Attributes:
//  - Key
type GeetcacheServiceHLogDeleteArgs struct {
	Key string `thrift:"key,1" json:"key"`
}

func NewGeetcacheServiceHLogDeleteArgs() *GeetcacheServiceHLogDeleteArgs {
	return &GeetcacheServiceHLogDeleteArgs{}
}

func (p *GeetcacheServiceHLogDeleteArgs) GetKey() string {
	return p.Key
}
func (p *GeetcacheServiceHLogDeleteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceHLogDeleteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *GeetcacheServiceHLogDeleteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HLogDelete_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceHLogDeleteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceHLogDeleteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceHLogDeleteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceHLogDeleteResult struct {
	Success *HLogStatus `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceHLogDeleteResult() *GeetcacheServiceHLogDeleteResult {
	return &GeetcacheServiceHLogDeleteResult{}
}

var GeetcacheServiceHLogDeleteResult_Success_DEFAULT *HLogStatus

func (p *GeetcacheServiceHLogDeleteResult) GetSuccess() *HLogStatus {
	if !p.IsSetSuccess() {
		return GeetcacheServiceHLogDeleteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServiceHLogDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceHLogDeleteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceHLogDeleteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &HLogStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServiceHLogDeleteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HLogDelete_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceHLogDeleteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceHLogDeleteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceHLogDeleteResult(%+v)", *p)
}

// Attributes:
//  - Key
type GeetcacheServiceHLogCardinalityArgs struct {
	Key string `thrift:"key,1" json:"key"`
}

func NewGeetcacheServiceHLogCardinalityArgs() *GeetcacheServiceHLogCardinalityArgs {
	return &GeetcacheServiceHLogCardinalityArgs{}
}

func (p *GeetcacheServiceHLogCardinalityArgs) GetKey() string {
	return p.Key
}
func (p *GeetcacheServiceHLogCardinalityArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceHLogCardinalityArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *GeetcacheServiceHLogCardinalityArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HLogCardinality_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceHLogCardinalityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceHLogCardinalityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceHLogCardinalityArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceHLogCardinalityResult struct {
	Success *HLogStatus `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceHLogCardinalityResult() *GeetcacheServiceHLogCardinalityResult {
	return &GeetcacheServiceHLogCardinalityResult{}
}

var GeetcacheServiceHLogCardinalityResult_Success_DEFAULT *HLogStatus

func (p *GeetcacheServiceHLogCardinalityResult) GetSuccess() *HLogStatus {
	if !p.IsSetSuccess() {
		return GeetcacheServiceHLogCardinalityResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServiceHLogCardinalityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceHLogCardinalityResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceHLogCardinalityResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &HLogStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServiceHLogCardinalityResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HLogCardinality_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceHLogCardinalityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceHLogCardinalityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceHLogCardinalityResult(%+v)", *p)
}

// Attributes:
//  - Hladd
type GeetcacheServiceHLogAddArgs struct {
	Hladd *HLogAddCmd `thrift:"hladd,1" json:"hladd"`
}

func NewGeetcacheServiceHLogAddArgs() *GeetcacheServiceHLogAddArgs {
	return &GeetcacheServiceHLogAddArgs{}
}

var GeetcacheServiceHLogAddArgs_Hladd_DEFAULT *HLogAddCmd

func (p *GeetcacheServiceHLogAddArgs) GetHladd() *HLogAddCmd {
	if !p.IsSetHladd() {
		return GeetcacheServiceHLogAddArgs_Hladd_DEFAULT
	}
	return p.Hladd
}
func (p *GeetcacheServiceHLogAddArgs) IsSetHladd() bool {
	return p.Hladd != nil
}

func (p *GeetcacheServiceHLogAddArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceHLogAddArgs) readField1(iprot thrift.TProtocol) error {
	p.Hladd = &HLogAddCmd{}
	if err := p.Hladd.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Hladd), err)
	}
	return nil
}

func (p *GeetcacheServiceHLogAddArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HLogAdd_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceHLogAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hladd", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hladd: ", p), err)
	}
	if err := p.Hladd.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Hladd), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hladd: ", p), err)
	}
	return err
}

func (p *GeetcacheServiceHLogAddArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceHLogAddArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GeetcacheServiceHLogAddResult struct {
	Success *HLogStatus `thrift:"success,0" json:"success,omitempty"`
}

func NewGeetcacheServiceHLogAddResult() *GeetcacheServiceHLogAddResult {
	return &GeetcacheServiceHLogAddResult{}
}

var GeetcacheServiceHLogAddResult_Success_DEFAULT *HLogStatus

func (p *GeetcacheServiceHLogAddResult) GetSuccess() *HLogStatus {
	if !p.IsSetSuccess() {
		return GeetcacheServiceHLogAddResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GeetcacheServiceHLogAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GeetcacheServiceHLogAddResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GeetcacheServiceHLogAddResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &HLogStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GeetcacheServiceHLogAddResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HLogAdd_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GeetcacheServiceHLogAddResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GeetcacheServiceHLogAddResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeetcacheServiceHLogAddResult(%+v)", *p)
}
